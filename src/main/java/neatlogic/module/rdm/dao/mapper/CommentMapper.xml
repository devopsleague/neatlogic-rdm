<?xml version="1.0" encoding="UTF-8" ?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.rdm.dao.mapper.CommentMapper">

    <select id="searchCommentCount" parameterType="neatlogic.framework.rdm.dto.CommentVo" resultType="int">
        select count(1)
        from rdm_issue_comment ric
        <include refid="searchCommentSql"></include>
    </select>

    <select id="getCommentById" parameterType="java.lang.Long" resultType="neatlogic.framework.rdm.dto.CommentVo">
        select ric.id,
               ric.issue_id        as issueId,
               ric.status,
               ric.content,
               ric.fcu,
               ric.fcd,
               ric.lcd,
               ric.parent_id       as parentId,
               (select count(*)
                from (select x.id
                      from rdm_issue_comment x
                      where x.parent_id = ric.id
                      limit 1) xx) as childCount
        from rdm_issue_comment ric
        where ric.id = #{value}
    </select>

    <select id="searchComment" parameterType="neatlogic.framework.rdm.dto.CommentVo"
            resultType="neatlogic.framework.rdm.dto.CommentVo">
        select
        ric.id,
        ric.issue_id as issueId,
        ric.status,
        ric.content,
        ric.fcu,
        ric.fcd,
        ric.lcd,
        ric.parent_id as parentId,
        (select count(*)
        from (select x.id
        from rdm_issue_comment x
        where x.parent_id = ric.id
        limit 1) xx) as childCount
        from rdm_issue_comment ric
        <include refid="searchCommentSql"></include>
        order by ric.id desc
        limit #{startNum}, #{pageSize}
    </select>

    <sql id="searchCommentSql">
        where ric.issue_id = #{issueId}
        <choose>
            <when test="parentId == null">
                and ric.parent_id is null
            </when>
            <otherwise>
                and ric.parent_id = #{parentId}
            </otherwise>
        </choose>
    </sql>

    <update id="updateComment" parameterType="neatlogic.framework.rdm.dto.CommentVo">
        update rdm_issue_comment
        set content = #{content},
            status  = #{status},
            lcd     = now(3)
        where id = #{id}
    </update>

    <insert id="insertComment" parameterType="neatlogic.framework.rdm.dto.CommentVo">
        insert into rdm_issue_comment
        (id,
         issue_id,
         status,
         content,
         fcu,
         fcd,
         parent_id)
        values (#{id},
                #{issueId},
                #{status},
                #{content},
                #{fcu},
                now(3),
                #{parentId})
    </insert>

    <delete id="deleteCommentById" parameterType="java.lang.Long">
        delete a,b
        from rdm_issue_comment a
                 left join rdm_issue_comment b on a.id = b.parent_id
        where a.id = #{value}
    </delete>
</mapper>
