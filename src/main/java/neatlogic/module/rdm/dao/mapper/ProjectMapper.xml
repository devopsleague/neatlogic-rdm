<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright(c) 2023 NeatLogic Co., Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.rdm.dao.mapper.ProjectMapper">
    <select id="getAppStatusRelByProjectId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.AppStatusRelVo">
        select rasr.from_status_id as fromStatusId,
               rasr.to_status_id   as toStatusId,
               rasr.app_id         as appId,
               rasr.config         as configStr,
               fras.name           as fromStatusName,
               fras.label          as fromStatusLabel,
               fras.color          as fromStatusColor,
               tras.name           as toStatusName,
               tras.label          as toStatusLabel,
               tras.color          as toStatusColor
        from rdm_app_status_rel rasr
                 join rdm_app_status fras on rasr.from_status_id = fras.id
                 join rdm_app_status tras on rasr.to_status_id = tras.id
                 join rdm_app ra on rasr.app_id = ra.id
        where ra.project_id = #{value}
    </select>

    <select id="searchProjectUser" parameterType="neatlogic.framework.rdm.dto.ProjectUserVo"
            resultType="neatlogic.framework.rdm.dto.ProjectUserVo">
        SELECT
        distinct rpu.user_id AS userId,
        u.user_name as userName,
        u.user_id as userEnName
        FROM rdm_project_user rpu
        JOIN user u ON rpu.user_id = u.uuid
        <where>
            <if test="keyword != null and keyword != ''">
                (u.user_name like concat('%', #{keyword},'%')
                or u.user_id like concat('%', #{keyword}, '%'))
            </if>
            <if test="userType != null and userType != ''">
                and rpu.user_type = #{userType}
            </if>
            <if test="userIdList != null and userIdList.size() > 0">
                and rpu.user_id in
                <foreach collection="userIdList" item="userId" open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
        </where>
        limit #{startNum}, #{pageSize}
    </select>


    <select id="getAppByProjectId" parameterType="java.lang.Long" resultType="neatlogic.framework.rdm.dto.AppVo">
        select id,
               app_type   as appType,
               project_id as projectId,
               sort,
               is_active  as isActive,
               config     as configStr
        from rdm_app
        where project_id = #{value}
    </select>

    <select id="getAppStatusByProjectId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.AppStatusVo">
        select ras.id,
               ras.app_id   as appId,
               ras.is_start as isStart,
               ras.is_end   as isEnd,
               ras.name,
               ras.label    as label,
               ras.sort     as sort,
               ras.description,
               ras.color
        from rdm_app_status ras
                 join rdm_app ra on ras.app_id = ra.id
        where ra.project_id = #{value}
    </select>

    <select id="getAppAttrByProjectId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.AppAttrVo">
        select raa.id,
               raa.app_id       as appId,
               raa.type,
               raa.name,
               raa.is_active    as isActive,
               raa.label        as label,
               raa.validator_id as validatorId,
               raa.description,
               raa.is_required  as isRequired,
               raa.sort,
               raa.is_private   as isPrivate,
               raa.config       as configStr
        from rdm_app_attr raa
                 join rdm_app ra on raa.app_id = ra.id
        where ra.project_id = #{value}
    </select>

    <resultMap id="projectUserMap" type="neatlogic.framework.rdm.dto.ProjectUserVo">
        <id property="userId" column="userId"/>
        <result property="userName" column="userName"/>
        <result property="projectId" column="projectId"/>
        <collection property="userTypeList" ofType="neatlogic.framework.rdm.dto.ProjectUserTypeVo">
            <id property="userType" column="userType"/>
        </collection>
    </resultMap>

    <select id="getProjectUserList" parameterType="neatlogic.framework.rdm.dto.ProjectUserVo"
            resultMap="projectUserMap">
        select
        rpu.user_id as userId,
        u.user_name as userName,
        rpu.user_type as userType,
        rpu.project_id as projectId
        from rdm_project_user rpu join `user` u on rpu.user_id = u.uuid
        where project_id = #{projectId}
        <if test="userType != null and userType != ''">
            and user_type = #{userType}
        </if>
    </select>


    <select id="checkProjectNameIsExists" parameterType="neatlogic.framework.rdm.dto.ProjectVo" resultType="int">
        SELECT count(1)
        from rdm_project
        WHERE name = #{name}
          AND id != #{id}
    </select>

    <sql id="searchProjectCondition">
        <where>
            <if test="keyword != null and keyword != ''">
                AND (name LIKE concat('%', #{keyword}, '%')
                or description LIKE concat('%',#{keyword},'%')
                )
            </if>
            <if test="isClose != null">
                AND is_close = #{isClose}
            </if>
            <if test="userIdList != null and userIdList.size() > 0">
                AND b.user_id in
                <foreach collection="userIdList" item="item" open="(" close=")" separator=",">#{item}</foreach>
            </if>
        </where>
    </sql>

    <resultMap id="projectResultMap" type="neatlogic.framework.rdm.dto.ProjectVo">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="startDate" column="startDate"/>
        <result property="endDate" column="endDate"/>
        <result property="color" column="color"/>
        <result property="templateId" column="templateId"/>
        <result property="type" column="type"/>
        <result property="isClose" column="isClose"/>
        <result property="fcd" column="fcd"/>
        <result property="fcu" column="fcu"/>
        <result property="lcd" column="lcd"/>
        <result property="lcu" column="lcu"/>
        <collection property="userList" ofType="neatlogic.framework.rdm.dto.ProjectUserVo">
            <id property="userId" column="userId"/>
            <collection property="userTypeList" ofType="neatlogic.framework.rdm.dto.ProjectUserTypeVo">
                <id property="userType" column="userType"/>
            </collection>
        </collection>
        <collection property="appList" ofType="neatlogic.framework.rdm.dto.AppVo">
            <id property="id" column="appId"/>
            <result property="type" column="appType"/>
            <result property="sort" column="appSort"/>
            <result property="configStr" column="configStr"/>
        </collection>
    </resultMap>

    <select id="searchProjectCount" parameterType="neatlogic.framework.rdm.dto.ProjectConditionVo" resultType="int">
        SELECT COUNT(distinct a.id)
        FROM rdm_project a
        LEFT JOIN rdm_project_user b ON a.id = b.project_id
        <include refid="searchProjectCondition"></include>
    </select>

    <select id="searchProjectId" parameterType="neatlogic.framework.rdm.dto.ProjectConditionVo"
            resultType="java.lang.Long">
        select
        distinct a.id
        from rdm_project a
        LEFT JOIN rdm_project_user b ON a.id = b.project_id
        LEFT JOIN rdm_app c ON a.id = c.project_id
        <include refid="searchProjectCondition"></include>
        ORDER by a.id desc
        LIMIT #{startNum}, #{pageSize}
    </select>

    <select id="searchProject" parameterType="neatlogic.framework.rdm.dto.ProjectConditionVo"
            resultMap="projectResultMap">
        select
        a.id,
        a.name,
        a.description,
        a.start_date AS startDate,
        a.end_date AS endDate,
        a.color,
        a.is_close as isClose,
        a.template_id AS templateId,
        a.type AS type,
        a.fcd,
        a.fcu,
        a.lcd,
        a.lcu,
        b.user_id AS userId,
        b.user_type AS userType,
        c.id AS appId,
        c.app_type AS appType,
        c.sort AS appSort,
        c.config AS configStr
        from rdm_project a
        LEFT JOIN rdm_project_user b ON a.id = b.project_id
        LEFT JOIN rdm_app c ON a.id = c.project_id
        <where>
            <if test="idList != null and idList.size > 0">
                a.id in
                <foreach collection="idList" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        ORDER by a.id desc, c.sort
    </select>

    <select id="getProjectAppTypeByProjectId" parameterType="java.lang.Long" resultType="java.lang.String">
        select app_type
        from rdm_app
        where project_id = #{value}
    </select>

    <select id="getProjectByAppId" parameterType="java.lang.Long" resultMap="projectResultMap">
        select a.id,
               a.name,
               a.description,
               a.start_date  AS startDate,
               a.end_date    AS endDate,
               a.color,
               a.template_id AS templateId,
               a.type        AS type,
               a.fcd,
               a.fcu,
               a.lcd,
               a.lcu,
               b.user_id     AS userId,
               b.user_type   AS userType,
               c.id          AS appId,
               c.app_type    AS appType,
               c.sort        AS appSort,
               c.config      AS configStr
        from rdm_project a
                 LEFT JOIN rdm_project_user b ON a.id = b.project_id
                 LEFT JOIN rdm_app c ON a.id = c.project_id
        WHERE c.id = #{value}
        order by c.sort
    </select>

    <select id="getProjectByIssueId" parameterType="java.lang.Long" resultMap="projectResultMap">
        select distinct a.id,
                        a.name,
                        a.description,
                        a.start_date  AS startDate,
                        a.end_date    AS endDate,
                        a.is_close    AS isClose,
                        a.color,
                        a.template_id AS templateId,
                        a.type        AS type,
                        a.fcd,
                        a.fcu,
                        a.lcd,
                        a.lcu,
                        b.user_id     AS userId,
                        b.user_type   AS userType,
                        c.id          AS appId,
                        c.app_type    AS appType,
                        c.sort        AS appSort,
                        c.config      AS configStr
        from rdm_project a
                 LEFT JOIN rdm_project_user b ON a.id = b.project_id
                 LEFT JOIN rdm_app c ON a.id = c.project_id
                 LEFT JOIN rdm_issue ri on c.id = ri.app_id
        WHERE ri.id = #{value}
        order by c.sort
    </select>

    <select id="getProjectById" parameterType="java.lang.Long" resultMap="projectResultMap">
        select a.id,
               a.name,
               a.description,
               a.start_date  AS startDate,
               a.end_date    AS endDate,
               a.is_close    AS isClose,
               a.color,
               a.template_id AS templateId,
               a.type        AS type,
               a.fcd,
               a.fcu,
               a.lcd,
               a.lcu,
               b.user_id     AS userId,
               b.user_type   AS userType,
               c.id          AS appId,
               c.app_type    AS appType,
               c.sort        AS appSort,
               c.config      AS configStr
        from rdm_project a
                 LEFT JOIN rdm_project_user b ON a.id = b.project_id
                 LEFT JOIN rdm_app c ON a.id = c.project_id
        WHERE a.id = #{value}
        order by c.sort
    </select>

    <select id="getStatusRelByProjectId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.ProjectStatusRelVo">
        select id             as id,
               from_status_id as fromStatusId,
               to_status_id   as toStatusId,
               project_id     as projectId
        from rdm_project_status_rel
        where project_id = #{value}
    </select>

    <select id="getStatusByProjectId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.ProjectStatusVo">
        select id, project_id as projectId, name, label, sort, color
        FROM rdm_project_status
        WHERE project_id = #{value}
        order by sort
    </select>


    <select id="getStatusById" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.ProjectStatusVo">
        select id, project_id as projectId, name, label, sort, color
        FROM rdm_project_status
        WHERE id = #{value}
    </select>


    <update id="updateProject" parameterType="neatlogic.framework.rdm.dto.ProjectVo">
        update rdm_project
        set `name`        = #{name},
            `description` = #{description},
            `start_date`  = #{startDate},
            `end_date`    = #{endDate},
            `color`       = #{color},
            `is_close`    = #{isClose},
            `lcd`         = now(3),
            `lcu`         = #{lcu}
        WHERE `id` = #{id}
    </update>

    <update id="updateProjectStatus" parameterType="neatlogic.framework.rdm.dto.ProjectStatusVo">
        update rdm_project_status
        set `name`        = #{name},
            `label`       = #{label},
            `color`       = #{color},
            `description` = #{description}
        where `id` = #{id}
    </update>


    <insert id="insertProjectStatusRel" parameterType="neatlogic.framework.rdm.dto.ProjectStatusRelVo">
        insert ignore into rdm_project_status_rel (id, project_id, from_status_id, to_status_id)
        values (#{id}, #{projectId}, #{fromStatusId}, #{toStatusId})
    </insert>

    <insert id="insertProjectUser" parameterType="neatlogic.framework.rdm.dto.ProjectUserVo">
        insert ignore into rdm_project_user (`user_id`, `user_type`, `project_id`)
        values (#{userId},
                #{userType},
                #{projectId})
    </insert>


    <insert id="insertProject" parameterType="neatlogic.framework.rdm.dto.ProjectVo">
        insert into rdm_project (id,
                                 name,
                                 description,
                                 start_date,
                                 end_date,
                                 color,
                                 type,
                                 template_id,
                                 is_close,
                                 fcd,
                                 fcu)
        values (#{id},
                #{name},
                #{description},
                #{startDate},
                #{endDate},
                #{color},
                #{type},
                #{templateId},
                #{isClose},
                NOW(3),
                #{fcu})
    </insert>


    <insert id="insertProjectStatus" parameterType="neatlogic.framework.rdm.dto.ProjectStatusVo">
        insert into rdm_project_status
        (id,
         project_id,
         name,
         label,
         sort,
         color)
        values (#{id},
                #{projectId},
                #{name},
                #{label},
                #{sort},
                #{color})
    </insert>

    <delete id="deleteProjectStatusRel" parameterType="neatlogic.framework.rdm.dto.ProjectStatusRelVo">
        delete
        from rdm_project_status_rel
        where project_id = #{projectId}
          and from_status_id = #{fromStatusId}
          and to_status_id = #{toStatusId}
    </delete>

    <delete id="deleteProjectUserByProjectId">
        delete
        from rdm_project_user
        where project_id = #{projectId}
        <if test="userTypeList != null and userTypeList.size() > 0">
            and user_type in
            <foreach collection="userTypeList" item="item" open="(" close=")" separator=",">#{item}</foreach>
        </if>
    </delete>


    <delete id="deleteProjectById" parameterType="java.lang.Long">
        DELETE a,b,rps
        FROM rdm_project a
                 left join rdm_project_user b on a.id = b.project_id
                 left join rdm_project_status rps on a.id = rps.project_id
                 left join rdm_project_status_rel rpsr on a.id = rpsr.project_id
                 left join rdm_iteration ri on a.id = ri.project_id
        WHERE a.id = #{value}
    </delete>


</mapper>
