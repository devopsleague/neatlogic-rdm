<?xml version="1.0" encoding="UTF-8" ?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.rdm.dao.mapper.AppMapper">
    <select id="getAppByProjectIdAndType" resultType="neatlogic.framework.rdm.dto.AppVo">
        select a.id,
               a.app_type   as type,
               a.project_id AS projectId,
               a.sort,
               a.is_active  as isActive
        from rdm_app a
        where a.project_id = #{projectId}
          and a.app_type = #{type}
        limit 1
    </select>

    <select id="getAppStatusRel" parameterType="neatlogic.framework.rdm.dto.AppStatusRelVo"
            resultType="neatlogic.framework.rdm.dto.AppStatusRelVo">
        select id,
               app_id         as appId,
               from_status_id as fromStatusId,
               to_status_id   as toStatusId,
               config         as configStr
        from rdm_app_status_rel
        where app_id = #{appId}
          and from_status_id = #{fromStatusId}
          and to_status_id = #{toStatusId}
    </select>

    <select id="getStatusRelByAppId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.AppStatusRelVo">
        select rasr.id as id,
        rasr.from_status_id as fromStatusId,
        rasr.to_status_id as toStatusId,
        rasr.app_id as appId,
        fras.name as fromStatusName,
        fras.label as fromStatusLabel,
        fras.color as fromStatusColor,
        tras.name as toStatusName,
        tras.label as toStatusLabel,
        tras.color as toStatusColor,
        rasr.config as configStr
        from rdm_app_status_rel rasr
        <!--from_status_id有0的情况，所以要用Left join-->
        left join rdm_app_status fras on rasr.from_status_id = fras.id
        join rdm_app_status tras on rasr.to_status_id = tras.id
        where rasr.app_id = #{value}
    </select>

    <select id="getStatusByAppIdAndName"
            resultType="neatlogic.framework.rdm.dto.AppStatusVo">
        select id,
               app_id   as appId,
               name,
               label,
               sort,
               color,
               is_start as isStart,
               is_end   as isEnd
        FROM rdm_app_status
        WHERE app_id = #{appId}
          and name = #{name}
    </select>

    <select id="getStatusById" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.AppStatusVo">
        select id,
               app_id   as appId,
               name,
               label,
               sort,
               color,
               is_start as isStart,
               is_end   as isEnd
        FROM rdm_app_status
        WHERE id = #{value}
    </select>

    <select id="getStatusByAppId" parameterType="neatlogic.framework.rdm.dto.IssueVo"
            resultType="neatlogic.framework.rdm.dto.AppStatusVo">
        select
        a.id,
        a.app_id as appId,
        a.is_start as isStart,
        a.is_end as isEnd,
        a.name,
        a.label,
        a.sort,
        a.color
        <if test="needIssueCount == 1">
            ,(select count(ri.id) from rdm_issue ri
            <if test="fromId != null">
                join rdm_issue_rel rir on ri.id = rir.to_issue_id and rir.from_issue_id = #{fromId}
            </if>
            <if test="toId != null">
                join rdm_issue_rel rir on ri.id = rir.from_issue_id and rir.to_issue_id = #{toId}
            </if>
            where ri.status = a.id) as issueCount
        </if>
        <if test="status != null">
            ,b.config as configStr
        </if>
        FROM rdm_app_status a
        <if test="status != null">
            join rdm_app_status_rel b on a.id = b.to_status_id and b.from_status_id = #{status} and b.app_id = #{appId}
        </if>
        WHERE a.app_id = #{appId}
        <if test="status != null">
            and a.id != #{status}
        </if>
        order by a.sort
    </select>

    <select id="getAppById" parameterType="java.lang.Long" resultMap="appResultMap">
        select a.id,
               a.app_type    as appType,
               a.project_id  AS projectId,
               a.sort,
               a.config      as configStr,
               b.app_id      AS attrAppId,
               b.id          as attrId,
               b.type        as attrType,
               b.name        as attrName,
               b.label       as attrLabel,
               b.description as attrDescription,
               b.is_required as attrIsRequired,
               b.sort        as attrSort,
               b.is_private  as attrIsPrivate,
               b.config     as attrConfigStr,
               ras.id       as statusId,
               ras.is_start as statusIsStart,
               ras.is_end   as statusIsEnd,
               ras.name     as statusName,
               ras.label    as statusLabel,
               ras.color    as statusColor
        from rdm_app a
                 left join rdm_app_attr b on a.id = b.app_id and b.is_active = 1
                 left join rdm_app_status ras on a.id = ras.app_id
        where a.id = #{value}
        order by b.sort, ras.is_start, ras.is_end desc, ras.sort
    </select>

    <select id="listAllAppAttr" resultMap="appResultMap">
        select a.id,
               a.app_type    as appType,
               a.project_id  AS projectId,
               a.sort,
               a.config      as configStr,
               b.id          as attrId,
               b.app_id      as attrAppId,
               b.type        as attrType,
               b.name        as attrName,
               b.label       as attrLabel,
               b.description as attrDescription,
               b.is_required as attrIsRequired,
               b.sort        as attrSort,
               b.is_private  as attrIsPrivate,
               b.config      as attrConfigStr
        from rdm_app a
                 left join rdm_app_attr b
                           on a.id = b.app_id
        order by a.id, b.sort
    </select>

    <resultMap id="appResultMap" type="neatlogic.framework.rdm.dto.AppVo">
        <id property="id" column="id"/>
        <result property="type" column="appType"/>
        <result property="projectId" column="projectId"/>
        <result property="sort" column="sort"/>
        <result property="configStr" column="configStr"/>
        <collection property="attrList" ofType="neatlogic.framework.rdm.dto.AppAttrVo">
            <id property="id" column="attrId"/>
            <result property="appId" column="attrAppId"/>
            <result property="type" column="attrType"/>
            <result property="name" column="attrName"/>
            <result property="label" column="attrLabel"/>
            <result property="description" column="attrDescription"/>
            <result property="isRequired" column="attrIsRequired"/>
            <result property="sort" column="attrSort"/>
            <result property="isPrivate" column="attrIsPrivate"/>
            <result property="configStr" column="attrConfigStr"/>
        </collection>
        <collection property="statusList" ofType="neatlogic.framework.rdm.dto.AppStatusVo">
            <id property="id" column="statusId"/>
            <result property="isStart" column="statusIsStart"/>
            <result property="isEnd" column="statusIsEnd"/>
            <result property="name" column="statusName"/>
            <result property="label" column="statusLabel"/>
            <result property="color" column="statusColor"/>
        </collection>
    </resultMap>

    <select id="getIterationAppType" parameterType="java.lang.Long" resultMap="appResultMap">
        select a.id,
               a.app_type    as appType,
               a.project_id  AS projectId,
               a.sort,
               a.config      as configStr,
               b.id          as attrId,
               b.app_id      as attrAppId,
               b.type        as attrType,
               b.name        as attrName,
               b.label       as attrLabel,
               b.description as attrDescription,
               b.is_required as attrIsRequired,
               b.sort        as attrSort,
               b.is_private  as attrIsPrivate,
               b.config      as attrConfigStr
        from (select distinct ra.*
              from rdm_app ra
                       join rdm_issue ri on ra.id = ri.app_id
              where ri.iteration = #{value}
              order by ra.sort) a
                 left join rdm_app_attr b
                           on a.id = b.app_id
        order by a.sort, b.sort
    </select>

    <select id="getAppDetailByProjectId" resultMap="appResultMap">
        select a.id,
        a.app_type as appType,
        a.project_id AS projectId,
        a.sort,
        a.config as configStr,
        b.id as attrId,
        b.app_id as attrAppId,
        b.type as attrType,
        b.name as attrName,
        b.label as attrLabel,
        b.description as attrDescription,
        b.is_required as attrIsRequired,
        b.sort as attrSort,
        b.is_private as attrIsPrivate,
        b.config as attrConfigStr
        from rdm_app a
        left join rdm_app_attr b
        on a.id = b.app_id
        where a.project_id = #{projectId}
        <if test="isActive != null">
            and a.is_active = #{isActive}
        </if>
        order by a.sort, b.sort
    </select>

    <select id="getAppUserSetting" parameterType="neatlogic.framework.rdm.dto.AppUserSettingVo"
            resultType="neatlogic.framework.rdm.dto.AppUserSettingVo">
        select user_id as userId,
               app_id  as appId,
               config  as configStr
        from rdm_app_usersetting
        where user_id = #{userId}
          and app_id = #{appId}
    </select>

    <insert id="insertAppStatusRel" parameterType="neatlogic.framework.rdm.dto.AppStatusRelVo">
        insert ignore into rdm_app_status_rel (id, app_id, from_status_id, to_status_id)
        values (#{id}, #{appId}, #{fromStatusId}, #{toStatusId})
    </insert>


    <insert id="insertAppStatus" parameterType="neatlogic.framework.rdm.dto.AppStatusVo">
        insert into rdm_app_status
        (id,
         app_id,
         name,
         label,
         sort,
         color)
        values (#{id},
                #{appId},
                #{name},
                #{label},
                #{sort},
                #{color})
    </insert>

    <update id="updateAppStatusSort" parameterType="neatlogic.framework.rdm.dto.AppStatusVo">
        update rdm_app_status
        set sort = #{sort}
        where id = #{id}
    </update>

    <update id="updateAppSort" parameterType="neatlogic.framework.rdm.dto.AppVo">
        update rdm_app
        set sort = #{sort}
        where id = #{id}
    </update>

    <update id="saveAppConfig" parameterType="neatlogic.framework.rdm.dto.AppVo">
        update rdm_app
        set config = #{configStr}
        where id = #{id}
    </update>


    <update id="updateAppStatus" parameterType="neatlogic.framework.rdm.dto.AppStatusVo">
        update rdm_app_status
        set `name`        = #{name},
            `label`       = #{label},
            `color`       = #{color},
            `description` = #{description}
        where `id` = #{id}
    </update>


    <update id="updateAppStatusRelConfig" parameterType="neatlogic.framework.rdm.dto.AppStatusVo">
        update rdm_app_status_rel
        set config = #{configStr}
        where id = #{id}
    </update>

    <update id="resetAppStatusIsStart" parameterType="java.lang.Long">
        update rdm_app_status
        set is_start = 0
        where app_id = #{value}
    </update>

    <update id="updateAppStatusType" parameterType="neatlogic.framework.rdm.dto.AppStatusVo">
        update rdm_app_status
        set id = #{id}
        <if test="isStart != null">
            ,is_start = #{isStart}
        </if>
        <if test="isEnd != null">
            ,is_end = #{isEnd}
        </if>
        where id = #{id}
    </update>

    <update id="updateAppIsActive">
        update rdm_app
        set is_active = #{isActive}
        where id = #{appId}
    </update>

    <insert id="insertApp" parameterType="neatlogic.framework.rdm.dto.AppVo">
        insert rdm_app (id, app_type, project_id, sort, is_active, config)
        values (#{id}, #{type}, #{projectId}, #{sort}, #{isActive}, #{configStr})
    </insert>

    <insert id="insertAppUserSetting" parameterType="neatlogic.framework.rdm.dto.AppUserSettingVo">
        insert into rdm_app_usersetting (user_id, app_id, config)
        values (#{userId}, #{appId}, #{configStr})
        ON DUPLICATE KEY
            UPDATE config = #{configStr}
    </insert>

    <delete id="deleteAppStatusRel" parameterType="neatlogic.framework.rdm.dto.AppStatusRelVo">
        delete
        from rdm_app_status_rel
        where app_id = #{appId}
          and from_status_id = #{fromStatusId}
          and to_status_id = #{toStatusId}
    </delete>


    <delete id="deleteAppById" parameterType="java.lang.Long">
        DELETE a,b,c,d,e,rau
        FROM rdm_app a
                 left join rdm_app_attr b on a.id = b.app_id
                 left join rdm_app_priority c on a.id = c.app_id
                 left join rdm_app_status d on a.id = d.app_id
                 left join rdm_app_status_rel e on a.id = e.app_id
                 left join rdm_app_usersetting rau on a.id = rau.app_id
        where a.id = #{value}
    </delete>

    <delete id="deleteAppStatusById" parameterType="java.lang.Long">
        DELETE a,b
        FROM rdm_app_status a
                 LEFT JOIN rdm_app_status_rel b ON a.id = b.from_status_id OR a.id = b.to_status_id
        WHERE a.id = #{value}
    </delete>


    <delete id="deleteCatalogById" parameterType="java.lang.Long">
        delete
        from rdm_app_catalog
        where id = #{value}
    </delete>
</mapper>
