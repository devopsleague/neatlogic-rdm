<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright(c) 2023 NeatLogic Co., Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.rdm.dao.mapper.IssueMapper">

    <select id="getIssueIdByFileId" parameterType="java.lang.Long" resultType="java.lang.Long">
        select issue_id
        from rdm_issue_file
        where file_id = #{value}
        limit 1
    </select>

    <select id="getIssueFileByIssueId" parameterType="java.lang.Long" resultType="neatlogic.framework.file.dto.FileVo">
        select a.name, a.size, a.id
        from `file` a
                 join rdm_issue_file b on a.id = b.file_id
        where b.issue_id = #{value}
    </select>

    <select id="getNotIndexIssueIdList"
            parameterType="neatlogic.framework.fulltextindex.dto.fulltextindex.FullTextIndexTypeVo"
            resultType="java.lang.Long" useCache="false">
        select a.id
        from rdm_issue a
                 left join fulltextindex_target_rdm b
                           on a.id = b.target_id and b.target_type = #{type}
        where b.target_id is null
        limit #{pageSize}
    </select>

    <select id="getTagByIssueId" parameterType="java.lang.Long" resultType="neatlogic.framework.rdm.dto.TagVo">
        select a.id, a.name
        from rdm_tag a
                 join rdm_issue_tag b on a.id = b.tag_id
        where b.issue_id = #{value}
    </select>

    <select id="getIssueById" parameterType="neatlogic.framework.rdm.dto.IssueVo" resultMap="issueResultMap">
        select ri.id,
               ri.name,
               ri.app_id                                                             as appId,
               ra.app_type                                                           as appType,
               ri.priority,
               rp.name                                                               as priorityName,
               ri.iteration,
               ria.name                                                              as iterationName,
               ri.status,
               ras.name                                                              as statusName,
               ras.label                                                             as statusLabel,
               ras.color                                                             as statusColor,
               ri.create_user                                                        as createUser,
               ri.create_date                                                        as createDate,
               ri.content                                                            as content,
               ri.catalog,
               rac.name                                                              as catalogName,
               rt.name                                                               as tagName,
               riu.user_id                                                           as userId,
               f.id                                                                  as fileId,
               f.name                                                                as fileName,
               f.size                                                                as fileSize,
               rir.to_issue_id                                                       as toIssueId,
               rir.to_app_id                                                         as toAppId,
               rir.from_issue_id                                                     as fromIssueId,
               rir.from_app_id                                                       as fromAppId,
               rir.rel_type                                                          as relType,
               fra.app_type                                                          as fromAppType,
               tra.app_type                                                          as toAppType,
               (select count(1) from rdm_issue cri where cri.parent_id = ri.id)      as childrenCount,
               IF(ri.id = rir.from_issue_id, 'from', 'to')                           as direction,
               (select count(1) from rdm_issue_audit ria where ria.issue_id = ri.id) as auditCount,
               (select count(1)
                from (select x.id
                      from rdm_issue_comment x
                      where x.issue_id = ri.id
                      limit 1) x2)                                                   as commentCount
        from rdm_issue ri
                 join rdm_app ra on ri.app_id = ra.id
                 left join rdm_priority as rp on ri.priority = rp.id
                 left join rdm_iteration as ria on ri.iteration = ria.id
                 left join rdm_app_status as ras on ri.status = ras.id
                 left join rdm_app_catalog rac on ri.catalog = rac.id
                 left join rdm_issue_tag rit on ri.id = rit.issue_id
                 left join rdm_tag rt on rit.tag_id = rt.id
                 left join rdm_issue_user riu on ri.id = riu.issue_id
                 left join rdm_issue_file rif on ri.id = rif.issue_id
                 left join file f on rif.file_id = f.id
                 left join rdm_issue_rel rir on ri.id = rir.from_issue_id or ri.id = rir.to_issue_id
                 left join rdm_app fra on rir.from_app_id = fra.id
                 left join rdm_app tra on rir.to_app_id = tra.id
        where ri.id = #{value}
    </select>

    <select id="getIssueCountByProjectId" parameterType="neatlogic.framework.rdm.dto.IssueCountVo"
            resultType="neatlogic.framework.rdm.dto.IssueCountVo">
        select count(a.id) as `count`,
        <choose>
            <when test="groupBy == 'day'">
                DATE_FORMAT(a.create_date, '%m-%d %H') as `date`
            </when>
            <when test="groupBy == 'month'">
                DATE_FORMAT(a.create_date, '%Y-%m %d') as `date`
            </when>
        </choose>
        from rdm_issue a
        join rdm_app b on a.app_id = b.id
        join rdm_project c on b.project_id = c.id
        where c.id = #{projectId}
        <choose>
            <when test="groupBy == 'day'">
                AND a.create_date &gt;= DATE_SUB(NOW(), INTERVAL 15 DAY)
            </when>
            <when test="groupBy == 'month'">
                AND a.create_date &gt;= DATE_SUB(NOW(), INTERVAL 12 MONTH)
            </when>
        </choose>
        group by `date`
    </select>


    <select id="deleteIssueByAppId" parameterType="neatlogic.framework.rdm.dto.AppVo">
        delete a,b,ria,ric,rif,rirf,rirt,rit
        from rdm_issue a
                 left join rdm_issue_user b on a.id = b.issue_id
                 left join rdm_issue_audit ria on a.id = ria.issue_id
                 left join rdm_issue_comment ric on a.id = ric.issue_id
                 left join rdm_issue_file rif on a.id = rif.issue_id
                 left join rdm_issue_rel rirf on a.id = rirf.from_issue_id
                 left join rdm_issue_rel rirt on a.id = rirt.to_issue_id
                 left join rdm_issue_tag rit on a.id = rit.issue_id
        where a.app_id = #{id}
    </select>

    <resultMap id="issueResultMap" type="neatlogic.framework.rdm.dto.IssueVo">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="appId" column="appId"/>
        <result property="appType" column="appType"/>
        <result property="parentId" column="parentId"/>
        <result property="createUser" column="createUser"/>
        <result property="createDate" column="createDate"/>
        <result property="status" column="status"/>
        <result property="statusColor" column="statusColor"/>
        <result property="statusName" column="statusName"/>
        <result property="statusLabel" column="statusLabel"/>
        <result property="priority" column="priority"/>
        <result property="priorityName" column="priorityName"/>
        <result property="iteration" column="iteration"/>
        <result property="iterationName" column="iterationName"/>
        <result property="catalog" column="catalog"/>
        <result property="catalogName" column="catalogName"/>
        <result property="content" column="content"/>
        <result property="commentCount" column="commentCount"/>
        <result property="auditCount" column="auditCount"/>
        <result property="childrenCount" column="childrenCount"/>
        <collection property="tagList" ofType="java.lang.String">
            <result column="tagName"/>
        </collection>
        <collection property="userList" ofType="neatlogic.framework.dto.UserVo">
            <id column="userId" property="uuid"/>
        </collection>
        <collection property="fileList" ofType="neatlogic.framework.file.dto.FileVo">
            <result column="fileId" property="id"/>
            <result column="fileName" property="name"/>
            <result column="fileSize" property="size"/>
        </collection>
        <collection property="issueRelList" ofType="neatlogic.framework.rdm.dto.IssueRelVo">
            <id column="fromIssueId" property="fromIssueId"/>
            <id column="toIssueId" property="toIssueId"/>
            <result column="fromAppId" property="fromAppId"/>
            <result column="toAppId" property="toAppId"/>
            <result column="fromAppType" property="fromAppType"/>
            <result column="toAppType" property="toAppType"/>
            <result column="relType" property="relType"/>
            <result column="direction" property="direction"/>
        </collection>
    </resultMap>


    <select id="getAttrByIssueIdList" parameterType="neatlogic.framework.rdm.dto.IssueVo"
            resultType="java.util.HashMap">
        select
        <if test="appAttrList != null and appAttrList.size() > 0">
            <foreach collection="appAttrList" item="item">
                x.`${item.id}` as `${item.id}`,
            </foreach>
        </if>
        x.issue_id as issueId
        from ${tableName} x where x.issue_id in
        <foreach collection="idList" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </select>

    <select id="getAttrByIssueId" parameterType="neatlogic.framework.rdm.dto.IssueVo"
            resultType="java.util.HashMap">
        select
        <if test="appAttrList != null and appAttrList.size() > 0">
            <foreach collection="appAttrList" item="item">
                x.`${item.id}` as `${item.id}`,
            </foreach>
        </if>
        x.issue_id as issueId
        from ${tableName} x where x.issue_id = #{id}
    </select>

    <select id="searchIssueCount" parameterType="neatlogic.framework.rdm.dto.IssueVo" resultType="int">
        select
        count(distinct ri.id)
        from rdm_issue ri
        <choose>
            <when test="fromId != null">
                join rdm_issue_rel rir on rir.to_app_id = #{appId} and rir.to_issue_id = ri.id and rir.from_issue_id =
                #{fromId}
            </when>
            <when test="toId != null">
                join rdm_issue_rel rir on rir.from_app_id = #{appId} and rir.from_issue_id = ri.id and rir.to_issue_id =
                #{toId}
            </when>
        </choose>
        left join rdm_priority as rp on ri.priority = rp.id
        left join rdm_app_catalog rac on ri.catalog = rac.id
        left join rdm_issue_tag rit on ri.id = rit.issue_id
        left join rdm_tag rt on rit.tag_id = rt.id
        left join rdm_issue_user riu on ri.id = riu.issue_id
        left join ${tableName} x on ri.id = x.issue_id
        <if test="wordList != null and wordList.size() > 0">
            join fulltextindex_target_rdm ftr on ri.id = ftr.target_id and ftr.target_type = 'issue'
            join fulltextindex_field_rdm ffr on ftr.target_id = ffr.target_id
            join fulltextindex_word fw on ffr.word_id = fw.id
        </if>
        <include refid="searchIssueSql"></include>
    </select>

    <select id="searchIssueId" parameterType="neatlogic.framework.rdm.dto.IssueVo" resultType="java.lang.Long">
        select
        distinct ri.id
        from rdm_issue ri
        <choose>
            <when test="fromId != null">
                join rdm_issue_rel rir on rir.to_app_id = #{appId} and rir.to_issue_id = ri.id and rir.from_issue_id =
                #{fromId}
            </when>
            <when test="toId != null">
                join rdm_issue_rel rir on rir.from_app_id = #{appId} and rir.from_issue_id = ri.id and rir.to_issue_id =
                #{toId}
            </when>
        </choose>
        left join rdm_app_catalog rac on ri.catalog = rac.id
        left join rdm_issue_tag rit on ri.id = rit.issue_id
        left join rdm_tag rt on rit.tag_id = rt.id
        left join rdm_issue_user riu on ri.id = riu.issue_id
        left join ${tableName} x on ri.id = x.issue_id
        <if test="wordList != null and wordList.size() > 0">
            join fulltextindex_target_rdm ftr on ri.id = ftr.target_id and ftr.target_type = 'issue'
            join fulltextindex_field_rdm ffr on ftr.target_id = ffr.target_id
            join fulltextindex_word fw on ffr.word_id = fw.id
        </if>
        <include refid="searchIssueSql"></include>
        order by ri.id desc
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchIssue" parameterType="neatlogic.framework.rdm.dto.IssueVo" resultMap="issueResultMap">
        select
        ri.id,
        ri.name,
        ri.app_id as appId,
        ra.app_type as appType,
        ri.parent_id as parentId,
        ri.priority,
        rp.name as priorityName,
        ri.iteration,
        ria.name as iterationName,
        ri.status,
        ras.color as statusColor,
        ras.name as statusName,
        ras.label as statusLabel,
        ri.create_user as createUser,
        ri.create_date as createDate,
        ri.catalog,
        rac.name as catalogName,
        rt.name as tagName,
        (select count(1) from rdm_issue cri where cri.parent_id = ri.id) as childrenCount,
        riu.user_id as userId
        from rdm_issue ri
        <choose>
            <when test="fromId != null">
                join rdm_issue_rel rir on rir.to_app_id = #{appId} and rir.to_issue_id = ri.id and rir.from_issue_id =
                #{fromId}
            </when>
            <when test="toId != null">
                join rdm_issue_rel rir on rir.from_app_id = #{appId} and rir.from_issue_id = ri.id and rir.to_issue_id =
                #{toId}
            </when>
        </choose>
        join rdm_app ra on ri.app_id = ra.id
        left join rdm_priority as rp on ri.priority = rp.id
        left join rdm_iteration as ria on ri.iteration = ria.id
        left join rdm_app_status as ras on ri.status = ras.id
        left join rdm_app_catalog rac on ri.catalog = rac.id
        left join rdm_issue_tag rit on ri.id = rit.issue_id
        left join rdm_tag rt on rit.tag_id = rt.id
        left join rdm_issue_user riu on ri.id = riu.issue_id
        where ri.id in
        <foreach collection="idList" open="(" close=")" separator="," item="item">#{item}</foreach>
        order by ri.id desc
    </select>

    <sql id="searchIssueSql">
        <where>
            <if test="appId != null">
                and ri.app_id = #{appId}
            </if>
            <choose>
                <when test="parentId == null and mode == 'level'">
                    and ri.parent_id is null
                </when>
                <when test="parentId != null">
                    and ri.parent_id = #{parentId}
                </when>
            </choose>
            <if test="wordList != null and wordList.size() > 0">
                and fw.word in
                <foreach collection="wordList" open="(" close=")" separator="," item="item">
                    #{item}
                </foreach>
            </if>
            <if test="createUser != null">
                and ri.create_user = #{createUser}
            </if>
            <if test="catalogLft != null and catalogRht != null">
                and rac.lft &gt;= #{catalogLft} and rac.rht &lt;= #{catalogRht}
            </if>
            <if test="iteration != null">
                and ri.iteration = #{iteration}
            </if>
            <if test="priority != null">
                and ri.priority = #{priority}
            </if>
            <if test="status != null">
                and ri.status = #{status}
            </if>
            <if test="tagList != null and tagList.size() > 0">
                and rt.name in
                <foreach collection="tagList" item="tag" open="(" close=")" separator=",">#{tag}</foreach>
            </if>
            <if test="attrFilterList != null and attrFilterList.size() > 0">
                <foreach collection="attrFilterList" item="attrFilter">
                    <choose>
                        <when test="attrFilter.attrType == 'select'">
                            and JSON_CONTAINS(x.`${attrFilter.attrId}`,#{attrFilter.value})
                        </when>
                        <when test="attrFilter.attrType == 'text'">
                            and x.`${attrFilter.attrId}` like CONCAT('%',#{attrFilter.value},'%')
                        </when>
                    </choose>

                </foreach>
            </if>
        </where>
    </sql>

    <update id="clearIssueParentId" parameterType="java.lang.Long">
        update rdm_issue
        set parent_id = null
        where id = #{id}
    </update>

    <update id="updateIssue" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        update rdm_issue
        set name      = #{name},
            priority  = #{priority},
            iteration = #{iteration},
            status    = #{status},
            catalog   = #{catalog},
            content   = #{content,typeHandler=CompressHandler}
        where id = #{id}
    </update>

    <update id="updateIssueAttr" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        update ${tableName}
        set
        <foreach collection="attrList" item="attr">
            `${attr.attrId}` = #{attr.value},
        </foreach>
        issue_id = #{id}
        where issue_id = #{id}
    </update>

    <insert id="insertIssueFile">
        insert into rdm_issue_file (issue_id, file_id)
        values (#{issueId}, #{fileId})
    </insert>

    <insert id="insertIssueUser">
        insert into rdm_issue_user (issue_id, user_id)
        values (#{issueId}, #{userId})
    </insert>

    <insert id="insertIssueTag">
        insert into rdm_issue_tag (issue_id, tag_id)
        values (#{issueId}, #{tagId})
    </insert>

    <insert id="insertIssue" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        insert into rdm_issue
        (id,
         parent_id,
         name,
         app_id,
         create_user,
         priority,
         iteration,
         status,
         create_date,
         content,
         catalog)
        values (#{id},
                #{parentId},
                #{name},
                #{appId},
                #{createUser},
                #{priority},
                #{iteration},
                #{status},
                now(3),
                #{content,typeHandler=CompressHandler},
                #{catalog})
    </insert>

    <insert id="insertIssueRel" parameterType="neatlogic.framework.rdm.dto.IssueRelVo">
        insert ignore into rdm_issue_rel (from_app_id, from_issue_id, to_app_id, to_issue_id, rel_type)
        values (#{fromAppId}, #{fromIssueId}, #{toAppId}, #{toIssueId}, #{relType})
    </insert>

    <insert id="replaceIssueAttr" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        replace into ${tableName}
        (
        <foreach collection="attrList" item="attr">
            `${attr.attrId}`,
        </foreach>
        issue_id)
        values (
        <foreach collection="attrList" item="attr">
            #{attr.value},
        </foreach>
        #{id}
        )
    </insert>

    <delete id="deleteIssueRel">
        delete
        from rdm_issue_rel
        where from_issue_id = #{fromIssueId}
          and to_issue_id = #{toIssueId}
    </delete>

    <delete id="deleteIssueFileByFileId" parameterType="java.lang.Long">
        delete
        from rdm_issue_file
        where file_id = #{value}
    </delete>

    <delete id="deleteIssueUserByIssueId" parameterType="java.lang.Long">
        delete
        from rdm_issue_user
        where issue_id = #{value}
    </delete>

    <delete id="deleteIssueTagByIssueId" parameterType="java.lang.Long">
        delete
        from rdm_issue_tag
        where issue_id = #{value}
    </delete>

    <delete id="deleteIssueById" parameterType="java.lang.Long">
        delete ri,rit,riu,rir,ria,ric,rif,x
        from rdm_issue ri
                 left join rdm_issue_tag rit on ri.id = rit.issue_id
                 left join rdm_issue_user riu on ri.id = riu.issue_id
                 left join rdm_issue_rel rir on ri.id = rir.from_issue_id or ri.id = rir.to_issue_id
                 left join rdm_issue_audit ria on ri.id = ria.issue_id
                 left join rdm_issue_comment ric on ri.id = ric.issue_id
                 left join rdm_issue_file rif on ri.id = rif.issue_id
                 left join ${tableName} x on ri.id = x.issue_id
        where ri.id = #{value}
    </delete>
</mapper>
