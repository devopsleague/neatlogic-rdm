<?xml version="1.0" encoding="UTF-8" ?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.rdm.dao.mapper.IssueMapper">
    <select id="getIssueCountByAppId" parameterType="neatlogic.framework.rdm.dto.IssueVo"
            resultType="neatlogic.framework.rdm.dto.IssueCountVo">
        select count(ri.id) as count, 'end' as type
        from rdm_issue ri
        join rdm_app_status ras on ri.status = ras.id
        <if test="fromId != null">
            join rdm_issue_rel rir on ri.id = rir.to_issue_id and rir.from_issue_id =
            #{fromId}
        </if>
        <if test="toId != null">
            join rdm_issue_rel rir on ri.id = rir.from_issue_id and rir.to_issue_id =
            #{toId}
        </if>
        where ri.app_id = #{appId}
        and ras.is_end = 1
        union
        select count(ri.id) as count, 'all' as type
        from rdm_issue ri
        <if test="fromId != null">
            join rdm_issue_rel rir on ri.id = rir.to_issue_id and rir.from_issue_id =
            #{fromId}
        </if>
        <if test="toId != null">
            join rdm_issue_rel rir on ri.id = rir.from_issue_id and rir.to_issue_id =
            #{toId}
        </if>
        where ri.app_id = #{appId}
    </select>

    <select id="getIssueRel" resultType="neatlogic.framework.rdm.dto.IssueRelVo">
        select from_app_id   as fromAppId,
               from_issue_id as fromIssueId,
               to_app_id     as toAppId,
               to_issue_id   as toIssueId,
               rel_type      as relType,
               fra.app_type  as fromAppType,
               tra.app_type  as toAppType,
               fri.name      as fromIssueName,
               tri.name      as toIssueName
        from rdm_issue_rel rir
                 left join rdm_issue fri on rir.from_issue_id = fri.id
                 left join rdm_issue tri on rir.to_issue_id = tri.id
                 left join rdm_app fra on rir.from_app_id = fra.id
                 left join rdm_app tra on rir.to_app_id = tra.id
        where from_issue_id = #{fromIssueId}
          and to_issue_id = #{toIssueId}
    </select>

    <select id="getRelIssueIdList" resultType="java.lang.Long">
        select
        <choose>
            <when test="direction == 'to'">
                from_issue_id
            </when>
            <when test="direction == 'from'">
                to_issue_id
            </when>
        </choose>
        from rdm_issue_rel
        where rel_type = #{relType}
        <choose>
            <when test="direction == 'to'">
                and to_issue_id = #{issueId}
            </when>
            <when test="direction == 'from'">
                and from_issue_id = #{issueId}
            </when>
        </choose>
    </select>

    <select id="checkIssueIsFavorite" resultType="int">
        select count(1)
        from rdm_favoriteissue
        where issue_id = #{issueId}
          and user_id = #{userId}
    </select>

    <select id="getIssueCountByIterationId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.rdm.dto.AppIssueCountVo">
        select count(a.id)         as count,
               b.app_type          as appType,
               IFNULL(c.is_end, 0) as isEnd
        from rdm_issue a
                 join rdm_app b on a.app_id = b.id
                 left join rdm_app_status c on a.status = c.id
        where a.iteration = #{iterationId}
        group by b.app_type, isEnd
    </select>

    <select id="getIssueIdByFileId" parameterType="java.lang.Long" resultType="java.lang.Long">
        select issue_id
        from rdm_issue_file
        where file_id = #{value}
        limit 1
    </select>

    <select id="getIssueFileByIssueId" parameterType="java.lang.Long" resultType="neatlogic.framework.file.dto.FileVo">
        select a.name, a.size, a.id
        from `file` a
                 join rdm_issue_file b on a.id = b.file_id
        where b.issue_id = #{value}
    </select>

    <select id="getNotIndexIssueIdList"
            parameterType="neatlogic.framework.fulltextindex.dto.fulltextindex.FullTextIndexTypeVo"
            resultType="java.lang.Long" useCache="false">
        select a.id
        from rdm_issue a
                 left join fulltextindex_target_rdm b
                           on a.id = b.target_id and b.target_type = #{type}
        where b.target_id is null
        limit #{pageSize}
    </select>

    <select id="getTagByIssueId" parameterType="java.lang.Long" resultType="neatlogic.framework.rdm.dto.TagVo">
        select a.id, a.name
        from rdm_tag a
                 join rdm_issue_tag b on a.id = b.tag_id
        where b.issue_id = #{value}
    </select>

    <select id="getIssueByIdForAudit" parameterType="java.lang.Long" resultMap="issueResultMap">
        select ri.id,
               ri.name,
               ri.app_id                                                       as appId,
               ra.app_type                                                     as appType,
               ra.project_id                                                   as projectId,
               ri.parent_id                                                    as parentId,
               ri.priority,
               ri.timecost,
               rp.name                                                         as priorityName,
               ri.iteration,
               ri.content                             as content,
               ri.catalog,
               ri.status,
               DATE_FORMAT(ri.start_date, '%Y-%m-%d') as startDate,
               DATE_FORMAT(ri.end_date, '%Y-%m-%d')   as endDate,
               ria.name                               as iterationName,
               ras.name                                                        as statusName,
               ras.label                                                       as statusLabel,
               ras.color                                                       as statusColor,
               rac.name                                                        as catalogName,
               rt.name                                                         as tagName,
               riu.user_id                                                     as userId,
               f.id                                                            as fileId,
               f.name                                                          as fileName,
               f.size                                                          as fileSize,
               rir.to_issue_id                                                 as toIssueId,
               (select x.name from rdm_issue x where x.id = rir.to_issue_id)   as toIssueName,
               rir.to_app_id                                                   as toAppId,
               rir.from_issue_id                                               as fromIssueId,
               (select x.name from rdm_issue x where x.id = rir.from_issue_id) as fromIssueName,
               rir.from_app_id                                                 as fromAppId,
               fra.app_type                                                    as fromAppType,
               tra.app_type                                                    as toAppType,
               CASE
                   WHEN rir.from_issue_id IS NULL THEN NULL
                   WHEN ri.id = rir.from_issue_id THEN 'from'
                   ELSE 'to'
                   END                                                         as direction
        from rdm_issue ri
                 join rdm_app ra on ri.app_id = ra.id
                 left join rdm_priority as rp on ri.priority = rp.id
                 left join rdm_iteration as ria on ri.iteration = ria.id
                 left join rdm_app_status as ras on ri.status = ras.id
                 left join rdm_app_catalog rac on ri.catalog = rac.id
                 left join rdm_issue_tag rit on ri.id = rit.issue_id
                 left join rdm_tag rt on rit.tag_id = rt.id
                 left join rdm_issue_user riu on ri.id = riu.issue_id
                 left join rdm_issue_file rif on ri.id = rif.issue_id
                 left join file f on rif.file_id = f.id
                 left join rdm_issue_rel rir on ri.id = rir.from_issue_id or ri.id = rir.to_issue_id
                 left join rdm_app fra on rir.from_app_id = fra.id
                 left join rdm_app tra on rir.to_app_id = tra.id
        where ri.id = #{value}
    </select>

    <select id="getIssueStatusById" parameterType="java.lang.Long" resultType="java.lang.Long">
        select status
        from rdm_issue
        where id = #{value}
    </select>

    <select id="checkIssueIsExists" parameterType="java.lang.Long" resultType="int">
        select count(1)
        from rdm_issue
        where id = #{value}
    </select>

    <select id="getIssueById" parameterType="java.lang.Long" resultMap="issueResultMap">
        select ri.id,
               ri.name,
               ri.app_id                                                             as appId,
               ra.app_type                                                           as appType,
               ra.project_id                                                         as projectId,
               ri.priority,
               ri.timecost,
               rp.name                                                               as priorityName,
               rp.color                                                              as priorityColor,
               ri.iteration,
               DATE_FORMAT(ri.start_date, '%Y-%m-%d')                                as startDate,
               DATE_FORMAT(ri.end_date, '%Y-%m-%d')                                  as endDate,
               ria.name                                                              as iterationName,
               ri.status,
               ras.name                                                              as statusName,
               ras.label                                                             as statusLabel,
               ras.color                                                             as statusColor,
               ras.is_end                                                            as isEnd,
               ri.create_user                                                        as createUser,
               (select user_name from `user` x where x.uuid = ri.create_user)        as createUserName,
               ri.create_date                                                        as createDate,
               ri.content                                                            as content,
               ri.catalog,
               rac.name                                                              as catalogName,
               rt.name                                                               as tagName,
               riu.user_id                                                           as userId,
               f.id                                                                  as fileId,
               f.name                                                                as fileName,
               f.size                                                                as fileSize,
               rir.to_issue_id                                                       as toIssueId,
               rir.to_app_id                                                         as toAppId,
               rir.from_issue_id                                                     as fromIssueId,
               rir.from_app_id                                                       as fromAppId,
               rir.rel_type                                                          as relType,
               fra.app_type                                                          as fromAppType,
               tra.app_type                                                          as toAppType,
               (select count(1) from rdm_issue cri where cri.parent_id = ri.id)      as childrenCount,
               CASE
                   WHEN rir.from_issue_id IS NULL THEN NULL
                   WHEN ri.id = rir.from_issue_id THEN 'from'
                   ELSE 'to'
                   END                                                               as direction,
               (select count(1) from rdm_issue_audit ria where ria.issue_id = ri.id) as auditCount,
               case
                   when exists
                       (select 1
                        from rdm_issue_comment x
                        where x.issue_id = ri.id) then 1
                   else 0 end                                                        as commentCount,
               riw.issue_id                                                          as webhookIssueId,
               riw.data_id                                                           as webhookDataId,
               rwd.app_id                                                            as webhookAppId,
               ric.id                                                                as issueCostId,
               DATE_FORMAT(ric.cost_date, '%Y-%m-%d')                                as issueCostDate,
               ric.timecost                                                          as issueCostTime,
               ric.description                                                       as issueCostDescription
        from rdm_issue ri
                 join rdm_app ra on ri.app_id = ra.id
                 left join rdm_priority as rp on ri.priority = rp.id
                 left join rdm_iteration as ria on ri.iteration = ria.id
                 left join rdm_app_status as ras on ri.status = ras.id
                 left join rdm_app_catalog rac on ri.catalog = rac.id
                 left join rdm_issue_tag rit on ri.id = rit.issue_id
                 left join rdm_tag rt on rit.tag_id = rt.id
                 left join rdm_issue_user riu on ri.id = riu.issue_id
                 left join rdm_issue_file rif on ri.id = rif.issue_id
                 left join file f on rif.file_id = f.id
                 left join rdm_issue_rel rir on ri.id = rir.from_issue_id or ri.id = rir.to_issue_id
                 left join rdm_app fra on rir.from_app_id = fra.id
                 left join rdm_app tra on rir.to_app_id = tra.id
                 left join rdm_issue_webhookdata riw on ri.id = riw.issue_id
                 left join rdm_webhook_data rwd on riw.data_id = rwd.id
                 left join rdm_issue_cost ric on ri.id = ric.issue_id
        where ri.id = #{value}
    </select>

    <select id="getIssueCountByProjectId" parameterType="neatlogic.framework.rdm.dto.IssueCountVo"
            resultType="neatlogic.framework.rdm.dto.IssueCountVo">
        select count(a.id) as `count`,
        <choose>
            <when test="groupBy == 'day'">
                DATE_FORMAT(a.create_date, '%m-%d %H') as `date`
            </when>
            <when test="groupBy == 'month'">
                DATE_FORMAT(a.create_date, '%Y-%m %d') as `date`
            </when>
        </choose>
        from rdm_issue a
        join rdm_app b on a.app_id = b.id
        join rdm_project c on b.project_id = c.id
        where c.id = #{projectId}
        <choose>
            <when test="groupBy == 'day'">
                AND a.create_date &gt;= DATE_SUB(NOW(), INTERVAL 15 DAY)
            </when>
            <when test="groupBy == 'month'">
                AND a.create_date &gt;= DATE_SUB(NOW(), INTERVAL 12 MONTH)
            </when>
        </choose>
        group by `date`
    </select>


    <select id="deleteIssueByAppId" parameterType="neatlogic.framework.rdm.dto.AppVo">
        delete a,b,ria,ric,rif,rirf,rit,rict
        from rdm_issue a
                 left join rdm_issue_user b on a.id = b.issue_id
                 left join rdm_issue_audit ria on a.id = ria.issue_id
                 left join rdm_issue_comment ric on a.id = ric.issue_id
                 left join rdm_issue_file rif on a.id = rif.issue_id
                 left join rdm_issue_rel rirf on a.id = rirf.from_issue_id OR a.id = rirf.to_issue_id
                 left join rdm_issue_tag rit on a.id = rit.issue_id
                 left join rdm_issue_cost rict on a.id = ric.issue_id
        where a.app_id = #{id}
    </select>

    <resultMap id="issueResultMap" type="neatlogic.framework.rdm.dto.IssueVo">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="appId" column="appId"/>
        <result property="appType" column="appType"/>
        <result property="projectId" column="projectId"/>
        <result property="parentId" column="parentId"/>
        <result property="createUser" column="createUser"/>
        <result property="createUserName" column="createUserName"/>
        <result property="createDate" column="createDate"/>
        <result property="startDate" column="startDate"/>
        <result property="endDate" column="endDate"/>
        <result property="status" column="status"/>
        <result property="statusColor" column="statusColor"/>
        <result property="statusName" column="statusName"/>
        <result property="statusLabel" column="statusLabel"/>
        <result property="isEnd" column="isEnd"/>
        <result property="priority" column="priority"/>
        <result property="timecost" column="timecost"/>
        <result property="priorityName" column="priorityName"/>
        <result property="priorityColor" column="priorityColor"/>
        <result property="iteration" column="iteration"/>
        <result property="iterationName" column="iterationName"/>
        <result property="catalog" column="catalog"/>
        <result property="catalogName" column="catalogName"/>
        <result property="content" column="content"/>
        <result property="commentCount" column="commentCount"/>
        <result property="auditCount" column="auditCount"/>
        <result property="childrenCount" column="childrenCount"/>
        <result property="isFavorite" column="isFavorite"/>
        <collection property="tagList" ofType="java.lang.String">
            <result column="tagName"/>
        </collection>
        <collection property="userList" ofType="neatlogic.framework.dto.UserVo">
            <id column="userId" property="uuid"/>
            <result column="userName" property="userName"/>
        </collection>
        <collection property="fileList" ofType="neatlogic.framework.file.dto.FileVo">
            <result column="fileId" property="id"/>
            <result column="fileName" property="name"/>
            <result column="fileSize" property="size"/>
        </collection>
        <collection property="issueRelList" ofType="neatlogic.framework.rdm.dto.IssueRelVo">
            <id column="fromIssueId" property="fromIssueId"/>
            <id column="toIssueId" property="toIssueId"/>
            <result column="fromIssueName" property="fromIssueName"/>
            <result column="toIssueName" property="toIssueName"/>
            <result column="fromAppId" property="fromAppId"/>
            <result column="toAppId" property="toAppId"/>
            <result column="fromAppType" property="fromAppType"/>
            <result column="toAppType" property="toAppType"/>
            <result column="relType" property="relType"/>
            <result column="direction" property="direction"/>
        </collection>
        <collection property="webhookList" ofType="neatlogic.framework.rdm.dto.IssueWebhookVo">
            <result column="webhookIssueId" property="issueId"/>
            <result column="webhookDataId" property="dataId"/>
            <result column="webhookAppId" property="appId"/>
        </collection>
        <collection property="costList" ofType="neatlogic.framework.rdm.dto.IssueCostVo">
            <id column="issueCostId" property="id"/>
            <result column="issueCostDate" property="costDate"/>
            <result column="issueCostTime" property="timecost"/>
            <result column="issueCostDescription" property="description"/>
        </collection>
    </resultMap>

    <select id="getAttrByIssueIdList" parameterType="neatlogic.framework.rdm.dto.IssueVo"
            resultType="java.util.HashMap">
        select
        <if test="appAttrList != null and appAttrList.size() > 0">
            <foreach collection="appAttrList" item="item">
                x.`${item.id}` as `${item.id}`,
            </foreach>
        </if>
        x.issue_id as issueId
        from ${tableName} x where x.issue_id in
        <foreach collection="idList" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </select>

    <select id="getAttrByIssueId" parameterType="neatlogic.framework.rdm.dto.IssueVo"
            resultType="java.util.HashMap">
        select
        <if test="appAttrList != null and appAttrList.size() > 0">
            <foreach collection="appAttrList" item="item">
                x.`${item.id}` as `${item.id}`,
            </foreach>
        </if>
        x.issue_id as issueId
        from ${tableName} x where x.issue_id = #{id}
    </select>

    <select id="searchIssueCount" parameterType="neatlogic.framework.rdm.dto.IssueConditionVo" resultType="int">
        <include refid="searchIssueAncestor"/>
        select
        count(distinct ri.id)
        from rdm_issue ri
        join rdm_app ra on ri.app_id = ra.id
        <choose>
            <when test="fromId != null">
                join rdm_issue_rel rir on rir.to_app_id = #{appId} and rir.to_issue_id = ri.id and rir.from_issue_id =
                #{fromId}
            </when>
            <when test="toId != null">
                join rdm_issue_rel rir on rir.from_app_id = #{appId} and rir.from_issue_id = ri.id and rir.to_issue_id =
                #{toId}
            </when>
        </choose>
        left join rdm_priority as rp on ri.priority = rp.id
        left join rdm_app_catalog rac on ri.catalog = rac.id
        left join rdm_issue_tag rit on ri.id = rit.issue_id
        left join rdm_tag rt on rit.tag_id = rt.id
        left join rdm_issue_user riu on ri.id = riu.issue_id
        <if test="isEnd != null">
            left join rdm_app_status ras on ri.status = ras.id
        </if>
        <if test="tableName != null and tableName != ''">
            left join
            ${tableName}
            x
            on
            ri
            .
            id
            =
            x
            .
            issue_id
        </if>
        <if test="wordList != null and wordList.size() > 0">
            join fulltextindex_target_rdm ftr on ri.id = ftr.target_id and ftr.target_type = 'issue'
            join fulltextindex_field_rdm ffr on ftr.target_id = ffr.target_id
            join fulltextindex_word fw on ffr.word_id = fw.id
        </if>
        <if test="iteration != null">
            join iterationAncestors ia on ri.id = ia.id
        </if>
        <include refid="searchIssueSql"></include>
    </select>

    <sql id="searchIssueAncestor">
        <if test="iteration != null">
            WITH RECURSIVE iterationAncestors AS (
            SELECT id, parent_id, iteration
            FROM rdm_issue
            WHERE iteration = #{iteration}
            <if test="mode == 'level'">
                UNION ALL
                SELECT i.id, i.parent_id, i.iteration
                FROM rdm_issue i
                INNER JOIN iterationAncestors a ON i.id = a.parent_id
            </if>
            )
        </if>
    </sql>

    <select id="searchIssueId" parameterType="neatlogic.framework.rdm.dto.IssueConditionVo" resultType="java.lang.Long">
        <include refid="searchIssueAncestor"/>
        select
        distinct ri.id
        <if test="sortList != null and sortList.size() > 0">
            ,
            <foreach collection="sortList" item="item" separator=",">
                ${item.field}
            </foreach>
        </if>
        from rdm_issue ri
        join rdm_app ra on ri.app_id = ra.id
        <choose>
            <when test="fromId != null">
                join rdm_issue_rel rir on rir.to_app_id = #{appId} and rir.to_issue_id = ri.id and rir.from_issue_id =
                #{fromId}
            </when>
            <when test="toId != null">
                join rdm_issue_rel rir on rir.from_app_id = #{appId} and rir.from_issue_id = ri.id and rir.to_issue_id =
                #{toId}
            </when>
        </choose>
        left join rdm_app_catalog rac on ri.catalog = rac.id
        left join rdm_issue_tag rit on ri.id = rit.issue_id
        left join rdm_tag rt on rit.tag_id = rt.id
        left join rdm_issue_user riu on ri.id = riu.issue_id
        left join user u on riu.user_id = u.uuid
        <if test="isEnd != null">
            left join rdm_app_status ras on ri.status = ras.id
        </if>
        <if test="tableName != null and tableName != ''">
            left join
            ${tableName}
            x
            on
            ri
            .
            id
            =
            x
            .
            issue_id
        </if>
        <if test="wordList != null and wordList.size() > 0">
            join fulltextindex_target_rdm ftr on ri.id = ftr.target_id and ftr.target_type = 'issue'
            join fulltextindex_field_rdm ffr on ftr.target_id = ffr.target_id
            join fulltextindex_word fw on ffr.word_id = fw.id
        </if>
        <if test="iteration != null">
            join iterationAncestors ia on ri.id = ia.id
        </if>
        <include refid="searchIssueSql"></include>
        <choose>
            <when test="sortList != null and sortList.size() > 0">
                order by
                <foreach collection="sortList" item="item" separator=",">
                    ${item.field} ${item.sort}
                </foreach>
            </when>
            <otherwise>
                order by ri.id desc
            </otherwise>
        </choose>
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchIssue" parameterType="neatlogic.framework.rdm.dto.IssueConditionVo" resultMap="issueResultMap">
        select
        ri.id,
        ri.name,
        ri.app_id as appId,
        ra.app_type as appType,
        ra.project_id as projectId,
        ri.parent_id as parentId,
        ri.priority,
        ri.timecost,
        DATE_FORMAT(ri.start_date, '%Y-%m-%d') as startDate,
        DATE_FORMAT(ri.end_date, '%Y-%m-%d') as endDate,
        rp.name as priorityName,
        rp.color as priorityColor,
        ri.iteration,
        ria.name as iterationName,
        ri.status,
        ras.color as statusColor,
        ras.name as statusName,
        ras.label as statusLabel,
        ras.is_end as isEnd,
        ri.create_user as createUser,
        ri.create_date as createDate,
        ri.catalog,
        rac.name as catalogName,
        rt.name as tagName,
        (select count(1) from rdm_favoriteissue x where x.issue_id = ri.id and x.user_id = #{currentUser}) as
        isFavorite,
        (select count(1) from rdm_issue cri where cri.parent_id = ri.id) as childrenCount,
        riu.user_id as userId,
        u.user_name as userName,
        ric.id as issueCostId,
        DATE_FORMAT(ric.cost_date, '%Y-%m-%d') as issueCostDate,
        ric.timecost as issueCostTime,
        ric.description as issueCostDescription
        <if test="sortList != null and sortList.size() > 0">
            <foreach collection="sortList" item="item">
                <if test="item.isCustom">
                    ,${item.field}
                </if>
            </foreach>
        </if>
        from rdm_issue ri
        <choose>
            <when test="fromId != null">
                join rdm_issue_rel rir on rir.to_app_id = #{appId} and rir.to_issue_id = ri.id and rir.from_issue_id =
                #{fromId}
            </when>
            <when test="toId != null">
                join rdm_issue_rel rir on rir.from_app_id = #{appId} and rir.from_issue_id = ri.id and rir.to_issue_id =
                #{toId}
            </when>
        </choose>
        join rdm_app ra on ri.app_id = ra.id
        left join rdm_priority as rp on ri.priority = rp.id
        left join rdm_iteration as ria on ri.iteration = ria.id
        left join rdm_app_status as ras on ri.status = ras.id
        left join rdm_app_catalog rac on ri.catalog = rac.id
        left join rdm_issue_tag rit on ri.id = rit.issue_id
        left join rdm_tag rt on rit.tag_id = rt.id
        left join rdm_issue_user riu on ri.id = riu.issue_id
        left join user u on riu.user_id = u.uuid
        left join rdm_issue_cost ric on ri.id = ric.issue_id
        <if test="tableName != null and tableName != ''">
            left join
            ${tableName}
            x
            on
            ri
            .
            id
            =
            x
            .
            issue_id
        </if>
        where ri.id in
        <foreach collection="idList" open="(" close=")" separator="," item="item">#{item}</foreach>
        <choose>
            <when test="sortList != null and sortList.size() > 0">
                order by
                <foreach collection="sortList" item="item" separator=",">
                    ${item.field} ${item.sort}
                </foreach>
            </when>
            <otherwise>
                order by ri.id desc
            </otherwise>
        </choose>
    </select>

    <sql id="searchIssueSql">
        <where>
            <if test="projectId != null">
                and ra.project_id = #{projectId}
            </if>
            <if test="appId != null">
                and ri.app_id = #{appId}
            </if>
            <if test="issueId != null">
                and ri.id = #{issueId}
            </if>
            <if test="createUser != null and createUser != ''">
                and ri.create_user =
                #{createUser}
            </if>
            <if test="createDateRange != null">
                <if test="createDateRange.size() > 0">
                    AND ri.create_date &gt;= STR_TO_DATE(
                    #{createDateRange[0]},
                    '%Y-%m-%d'
                    )
                </if>
                <if test="createDateRange.size() > 1">
                    AND ri.create_date &lt;= STR_TO_DATE(
                    #{createDateRange[1]},
                    '%Y-%m-%d'
                    )
                </if>
            </if>
            <choose>
                <when test="parentId == null and mode == 'level'">
                    and ri.parent_id is null
                </when>
                <when test="parentId != null">
                    and ri.parent_id = #{parentId}
                </when>
            </choose>
            <if test="wordList != null and wordList.size() > 0">
                and fw.word in
                <foreach collection="wordList" open="(" close=")" separator="," item="item">
                    #{item}
                </foreach>
            </if>
            <if test="catalogLft != null and catalogRht != null">
                and rac.lft &gt;=
                #{catalogLft}
                and
                rac
                .
                rht
                &lt;=
                #{catalogRht}
            </if>
            <!--<if test="iteration != null">
                and ri.iteration = #{iteration}
            </if>-->
            <if test="priority != null">
                and ri.priority =
                #{priority}
            </if>
            <choose>
                <when test="isExpired != null and isExpired == 1">
                    and ri.end_date &lt; NOW()
                </when>
                <when test="isExpired != null and isExpired == 0">
                    and (ri.end_date &gt;= NOW() or ri.end_date is null)
                </when>
            </choose>
            <if test="statusList != null and statusList.size() > 0">
                and ri.status in
                <foreach collection="statusList" item="status" open="(" close=")" separator=",">#{status}</foreach>
            </if>
            <if test="tagList != null and tagList.size() > 0">
                and rt.name in
                <foreach collection="tagList" item="tag" open="(" close=")" separator=",">#{tag}</foreach>
            </if>
            <if test="startDateRange != null">
                <if test="startDateRange.size() > 0">
                    AND ri.start_date &gt;= STR_TO_DATE(
                    #{startDateRange[0]},
                    '%Y-%m-%d'
                    )
                </if>
                <if test="startDateRange.size() > 1">
                    AND ri.start_date &lt;= STR_TO_DATE(
                    #{startDateRange[1]},
                    '%Y-%m-%d'
                    )
                </if>
            </if>
            <if test="endDateRange != null">
                <if test="endDateRange.size() > 0">
                    AND ri.end_date &gt;= STR_TO_DATE(
                    #{endDateRange[0]},
                    '%Y-%m-%d'
                    )
                </if>
                <if test="endDateRange.size() > 1">
                    AND ri.end_date &lt;= STR_TO_DATE(
                    #{endDateRange[1]},
                    '%Y-%m-%d'
                    )
                </if>
            </if>
            <if test="timecost != null">
                AND ri.timecost = #{timecost}
            </if>
            <if test="userIdList != null and userIdList.size() > 0">
                AND riu.user_id in
                <foreach collection="userIdList" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="isEnd != null">
                <choose>
                    <when test="isEnd == 0">
                        AND (ras.is_end = 0 or ras.is_end is null)
                    </when>
                    <otherwise>
                        AND ras.is_end = 1
                    </otherwise>
                </choose>
            </if>
            <if test="isFavorite != null and isFavorite == 1">
                and exists (select 1 from rdm_favoriteissue rf where rf.issue_id = ri.id and rf.user_id =
                #{currentUser}
                )
            </if>
            <if test="isProcessed != null and isProcessed == 1">
                AND (exists (select 1 from rdm_issue_audit ria where ria.issue_id = ri.id and ria.input_user =
                #{currentUser} limit 1
                ) or
                exists (select 1 from rdm_issue_comment ric where ric.issue_id = ri.id and
                ric.fcu =
                #{currentUser} limit 1)
                )
            </if>
            <if test="tableName != null and tableName != '' and attrFilterList != null and attrFilterList.size() > 0">
                <foreach collection="attrFilterList" item="attrFilter">
                    <if test="attrFilter.valueList != null and attrFilter.valueList.size()>0">
                        <choose>
                            <when test="attrFilter.attrType == 'select'">
                                and JSON_CONTAINS(x.`${attrFilter.attrId}`,#{attrFilter.value})
                            </when>
                            <when test="attrFilter.attrType == 'text' or attrFilter.attrType == 'textarea'">
                                and x.`${attrFilter.attrId}` like CONCAT('%',#{attrFilter.valueList[0]},'%')
                            </when>
                            <when test="attrFilter.attrType == 'number'">
                                and x.`${attrFilter.attrId}` = #{attrFilter.valueList[0]}
                            </when>
                            <when test="attrFilter.attrType == 'file'">
                                <choose>
                                    <when test="attrFilter.valueList[0] == 1">
                                        and x.`${attrFilter.attrId}` is not null
                                    </when>
                                    <otherwise>
                                        and x.`${attrFilter.attrId}` is null
                                    </otherwise>
                                </choose>
                            </when>
                            <when test="attrFilter.attrType == 'user'">
                                and JSON_CONTAINS(x.`${attrFilter.attrId}`,#{attrFilter.value})
                            </when>
                            <when test="attrFilter.attrType == 'date' and attrFilter.valueList.size() > 0">
                                AND x.`${attrFilter.attrId}` &gt;=
                                STR_TO_DATE(#{attrFilter.valueList[0]},'%Y-%m-%d')
                                <if test="attrFilter.valueList.size() > 1">
                                    AND x.`${attrFilter.attrId}` &lt;=
                                    STR_TO_DATE(
                                    #{attrFilter.valueList[1]},
                                    '%Y-%m-%d'
                                    )
                                </if>
                            </when>
                            <when test="attrFilter.attrType == 'datetime' and  attrFilter.valueList.size() > 0">
                                AND x.`${attrFilter.attrId}` &gt;= STR_TO_DATE(#{attrFilter.valueList[0]},'%Y-%m-%d
                                %H:%i:%s')
                                <if test="attrFilter.valueList.size() > 1">
                                    AND x.`${attrFilter.attrId}` &lt;= STR_TO_DATE(
                                    #{attrFilter.valueList[1]},
                                    '%Y-%m-%d
                                    %H:%i:%s'
                                    )
                                </if>
                            </when>
                            <when test="attrFilter.attrType == 'time' and  attrFilter.valueList.size() > 0">
                                AND x.`${attrFilter.attrId}` &gt;= STR_TO_DATE(#{attrFilter.valueList[0]},'%H:%i:%s')
                                <if test="attrFilter.valueList.size() > 1">
                                    AND x.`${attrFilter.attrId}` &lt;=
                                    STR_TO_DATE(
                                    #{attrFilter.valueList[1]},
                                    '%H:%i:%s'
                                    )
                                </if>
                            </when>
                        </choose>
                    </if>
                </foreach>
            </if>
        </where>
    </sql>

    <select id="getProjectIssueCountByUserId" parameterType="neatlogic.framework.rdm.dto.IssueConditionVo"
            resultType="neatlogic.framework.rdm.dto.ProjectVo">
        select count(distinct ri.id) as issueCount,
        rp.id as id,
        rp.name as name
        from rdm_issue ri
        join rdm_app ra on ri.app_id = ra.id
        join rdm_project rp on ra.project_id = rp.id and rp.is_close = 0
        left join rdm_app_status as ras on ri.status = ras.id
        left join rdm_issue_user riu
        on ri.id = riu.issue_id
        <include refid="searchIssueCountSql"/>
        group by rp.id
        order by rp.id desc
    </select>

    <select id="getAppIssueCountByProjectIdAndUserId" parameterType="neatlogic.framework.rdm.dto.IssueConditionVo"
            resultType="neatlogic.framework.rdm.dto.AppVo">
        select count(distinct ri.id) as issueCount,
        ra.id as id,
        ra.app_type as type,
        ra.sort as sort
        from rdm_issue ri
        join rdm_app ra on ri.app_id = ra.id
        left join rdm_app_status as ras on ri.status = ras.id
        left join rdm_issue_user riu
        on ri.id = riu.issue_id
        <include refid="searchIssueCountSql"/>
        group by ra.id
        order by ra.sort
    </select>

    <sql id="searchIssueCountSql">
        <where>
            <if test="projectId != null">
                and ra.project_id =
                #{projectId}
            </if>
            <if test="createUser != null and createUser != ''">
                and ri.create_user =
                #{createUser}
            </if>
            <if test="userIdList != null and userIdList.size() > 0">
                AND riu.user_id in
                <foreach collection="userIdList" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="appType != null and appType != ''">
                AND ra.app_type =
                #{appType}
            </if>
            <if test="isEnd != null">
                <choose>
                    <when test="isEnd == 0">
                        AND (ras.is_end = 0 or ras.is_end is null)
                    </when>
                    <otherwise>
                        AND ras.is_end = 1
                    </otherwise>
                </choose>
            </if>
            <if test="isFavorite != null and isFavorite == 1">
                AND exists (select 1 from rdm_favoriteissue rf where rf.issue_id = ri.id and rf.user_id =
                #{currentUser}
                )
            </if>
            <if test="isProcessed != null and isProcessed == 1">
                AND (
                exists (select 1 from rdm_issue_audit ria where ria.issue_id = ri.id and ria.input_user =
                #{currentUser} limit 1) or
                exists (select 1 from rdm_issue_comment ric where ric.issue_id = ri.id and
                ric.fcu =
                #{currentUser} limit 1)
                )
            </if>
        </where>
    </sql>


    <update id="clearIssueParentId" parameterType="java.lang.Long">
        update rdm_issue
        set parent_id = null
        where id = #{id}
    </update>

    <update id="updateIssue" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        update rdm_issue
        set name       = #{name},
            priority   = #{priority},
            iteration  = #{iteration},
            status     = #{status},
            catalog    = #{catalog},
            start_date = #{startDate},
            end_date   = #{endDate},
            content  = #{content,typeHandler=CompressHandler},
            timecost = #{timecost}
        where id = #{id}
    </update>

    <update id="updateIssueAttr" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        update ${tableName}
        set
        <foreach collection="attrList" item="attr">
            `${attr.attrId}` = #{attr.value},
        </foreach>
        issue_id = #{id}
        where issue_id = #{id}
    </update>

    <insert id="insertIssueIsFavorite">
        insert into rdm_favoriteissue (issue_id, user_id)
        values (#{issueId}, #{userId})
    </insert>

    <insert id="insertIssueFile">
        insert into rdm_issue_file (issue_id, file_id)
        values (#{issueId}, #{fileId})
    </insert>

    <insert id="insertIssueUser">
        insert into rdm_issue_user (issue_id, user_id)
        values (#{issueId}, #{userId})
    </insert>

    <insert id="insertIssueTag">
        insert ignore into rdm_issue_tag (issue_id, tag_id)
        values (#{issueId}, #{tagId})
    </insert>

    <insert id="insertIssue" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        insert into rdm_issue
        (id,
         parent_id,
         name,
         app_id,
         create_user,
         priority,
         iteration,
         status,
         create_date,
         start_date,
         end_date,
         content,
         catalog,
         timecost)
        values (#{id},
                #{parentId},
                #{name},
                #{appId},
                #{createUser},
                #{priority},
                #{iteration},
                #{status},
                now(3),
                #{startDate},
                #{endDate},
                #{content,typeHandler=CompressHandler},
                #{catalog},
                #{timecost})
    </insert>

    <insert id="insertIssueRel" parameterType="neatlogic.framework.rdm.dto.IssueRelVo">
        insert ignore into rdm_issue_rel (from_app_id, from_issue_id, to_app_id, to_issue_id, rel_type)
        values (#{fromAppId}, #{fromIssueId}, #{toAppId}, #{toIssueId}, #{relType})
    </insert>

    <insert id="replaceIssueAttr" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        replace into ${tableName}
        (
        <foreach collection="attrList" item="attr">
            `${attr.attrId}`,
        </foreach>
        issue_id)
        values (
        <foreach collection="attrList" item="attr">
            #{attr.value},
        </foreach>
        #{id}
        )
    </insert>

    <delete id="deleteFavoriteIssue">
        delete
        from rdm_favoriteissue
        where issue_id = #{issueId}
          and user_id = #{userId}
    </delete>

    <delete id="deleteIssueRel">
        delete
        from rdm_issue_rel
        where from_issue_id = #{fromIssueId}
          and to_issue_id = #{toIssueId}
    </delete>

    <delete id="deleteIssueFileByFileId" parameterType="java.lang.Long">
        delete
        from rdm_issue_file
        where file_id = #{value}
    </delete>

    <delete id="deleteIssueUserByIssueId" parameterType="java.lang.Long">
        delete
        from rdm_issue_user
        where issue_id = #{value}
    </delete>

    <delete id="deleteIssueTagByIssueId" parameterType="java.lang.Long">
        delete
        from rdm_issue_tag
        where issue_id = #{value}
    </delete>

    <delete id="deleteIssueById" parameterType="neatlogic.framework.rdm.dto.IssueVo">
        delete ri,rit,riu,rir,ria,ric,rif,riw,rico,x
        from rdm_issue ri
                 left join rdm_issue_tag rit on ri.id = rit.issue_id
                 left join rdm_issue_user riu on ri.id = riu.issue_id
                 left join rdm_issue_rel rir on ri.id = rir.from_issue_id or ri.id = rir.to_issue_id
                 left join rdm_issue_audit ria on ri.id = ria.issue_id
                 left join rdm_issue_comment ric on ri.id = ric.issue_id
                 left join rdm_issue_file rif on ri.id = rif.issue_id
                 left join rdm_issue_webhookdata riw on ri.id = riw.issue_id
                 left join rdm_issue_cost rico on ri.id = rico.issue_id
                 left join ${tableName} x on ri.id = x.issue_id
        where ri.id = #{id}
    </delete>
</mapper>
